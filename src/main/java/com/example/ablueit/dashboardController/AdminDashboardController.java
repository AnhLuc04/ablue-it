package com.example.ablueit.dashboardController;

import com.example.ablueit.model.Role;
import com.example.ablueit.model.Store;
import com.example.ablueit.model.User;
import com.example.ablueit.repository.RoleRepository;
import com.example.ablueit.repository.StoreRepository;
import com.example.ablueit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder; // ‚úÖ Import PasswordEncoder
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Controller
@PreAuthorize("hasRole('ROLE_ADMIN')")
@RequestMapping("/admin") // T·∫•t c·∫£ endpoint trong class n√†y s·∫Ω b·∫Øt ƒë·∫ßu b·∫±ng /admin
public class AdminDashboardController {

    @Autowired
    private StoreRepository storeRepository;
    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder; // ‚úÖ Inject PasswordEncoder

    @GetMapping("/dashboard")
    public String adminDashboard(Model model, @AuthenticationPrincipal UserDetails userDetails) {
        System.out.println("üë§ User: " + userDetails.getUsername());
        System.out.println("üîë Roles: " + userDetails.getAuthorities());

        // L·∫•y danh s√°ch user c√≥ vai tr√≤ ROLE_SELLER
        List<User> sellerUsers = userRepository.findSellersCreatedByAdmin(userDetails.getUsername());

        // L·∫•y danh s√°ch store do seller t·∫°o
        List<Store> sellerStores = storeRepository.findStoresBySellersCreatedByAdmin(userDetails.getUsername());

        model.addAttribute("role", "Admin");
        model.addAttribute("username", userDetails.getUsername());
        model.addAttribute("sellers", sellerUsers);
        model.addAttribute("stores", sellerStores);

        return "admin-dashboard/admin"; // Tr·∫£ v·ªÅ template Thymeleaf
    }
    @GetMapping("/create-seller")
    public ModelAndView showCreateSellerForm() {
        ModelAndView modelAndView = new ModelAndView("admin-dashboard/create-seller");
        modelAndView.addObject("user", new User());
        return modelAndView;
    }

    @PostMapping("/create-seller")
    public ModelAndView createSeller(@ModelAttribute("user") User user) {
        ModelAndView modelAndView = new ModelAndView("admin-dashboard/create-seller");

        if (userRepository.existsByUsername(user.getUsername())) {
            modelAndView.addObject("errorMessage", "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!");
            return modelAndView;
        }

        // T·∫°o v√† g√°n secret_key

        String username = ((UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername();
        User createby = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Seller not found"));


        // T·∫°o m·ªõi Seller
        User seller = new User();
        seller.setUsername(user.getUsername());
        seller.setPassword(passwordEncoder.encode(user.getPassword()));  // M√£ h√≥a m·∫≠t kh·∫©u
        seller.setCreatedBy(createby);

        // N·∫øu email kh√¥ng ƒë∆∞·ª£c cung c·∫•p, g√°n email m·∫∑c ƒë·ªãnh
        if (user.getEmail() == null || user.getEmail().isEmpty()) {
            seller.setEmail(user.getUsername() + "@gmail.com");  // G√°n email m·∫∑c ƒë·ªãnh
        } else {
            seller.setEmail(user.getEmail());  // G√°n email t·ª´ form
        }

        // T·∫°o Role SELLER v√† g√°n v√†o User
        Role sellerRole = roleRepository.findByName("ROLE_SELLER")
                .orElseGet(() -> {
                    Role newRole = new Role();
                    newRole.setName("ROLE_SELLER");
                    return roleRepository.save(newRole);
                });

        seller.getRoles().add(sellerRole);  // G√°n Role SELLER cho User

        userRepository.save(seller);  // L∆∞u Seller v√†o c∆° s·ªü d·ªØ li·ªáu

        modelAndView.addObject("successMessage", "T·∫°o t√†i kho·∫£n SELLER th√†nh c√¥ng!");
        return modelAndView;
    }

}
